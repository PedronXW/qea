{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Q&A API",
    "description": "API for a Q&A application"
  },
  "servers": [
    {
      "url": "http://localhost:3333"
    }
  ],
  "tags": [
    {
      "name": "Sessions",
      "description": "Routes for user authentication"
    },
    {
      "name": "Users",
      "description": "Routes for user management"
    },
    {
      "name": "Questions",
      "description": "Routes for question management"
    },
    {
      "name": "Answers",
      "description": "Routes for answer management"
    }
  ],
  "components":{
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message",
            "example": "User not found"
          }
        }
      },
      "Authorization": {
        "type": "string",
        "description": "Bearer token",
        "example": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
        "name": "Authorization",
        "in": "header",
        "required": true
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id must be a valid uuid.",
            "example": "e30bcc80-5b00-4d0f-922d-e8aad182258c"
          },
          "name": {
            "type": "string",
            "description": "Name must be at least 3 characters long.",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email must be a valid email.",
            "example": "johndoe@john.com"
          },
          "type": {
            "type": "string",
            "enum": ["PARTICIPANT", "ORGANIZER"]
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "description": "Password must be at least 8 characters long."
          },
          "createdAt": {
            "type": "string",
            "description": "Date must be in ISO 8601 format.",
            "example": "2021-06-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date must be in ISO 8601 format.",
            "example": "2021-06-01T00:00:00.000Z"
          }
        }
      },
      "Question": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id must be a valid uuid.",
            "example": "e30bcc80-5b00-4d0f-922d-e8aad182258c"
          },
          "title": {
            "type": "string",
            "description": "Title must be at least 3 characters long.",
            "example": "How to create a new question"
          },
          "slug": {
            "type": "string",
            "description": "Slug must be a valid slug.",
            "example": "how-to-create-a-new-question"
          },
          "authorId": {
            "type": "string",
            "description": "Id must be a valid uuid.",
            "example": "e30bcc80-5b00-4d0f-922d-e8aad182258c"
          },
          "createdAt": {
            "type": "string",
            "description": "Date must be in ISO 8601 format.",
            "example": "2021-06-01T00:00:00.000Z"
          },
          "answeredByCurrentUser":{
            "type": "boolean",
            "description": "Indicates if the question was answered by the current user.",
            "example": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Indicates if the question was answered by the current user.",
            "example": "2021-06-01T00:00:00.000Z"
          }
        }
      },
      "Answer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id must be a valid uuid.",
            "example": "e30bcc80-5b00-4d0f-922d-e8aad182258c"
          },
          "content": {
            "type": "string",
            "description": "Content must be at least 3 characters long.",
            "example": "You can create a new question by clicking on the 'Create Question' button."
          },
          "questionId": {
            "type": "string",
            "description": "Id must be a valid uuid.",
            "example": "e30bcc80-5b00-4d0f-922d-e8aad182258c"
          },
          "authorId": {
            "type": "string",
            "description": "Id must be a valid uuid.",
            "example": "e30bcc80-5b00-4d0f-922d-e8aad182258c"
          },
          "createdAt": {
            "type": "string",
            "description": "Date must be in ISO 8601 format.",
            "example": "2021-06-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date must be in ISO 8601 format.",
            "example": "2021-06-01T00:00:00.000Z"
          }
        }
      }
    }
  },
  "paths": {
    "/sessions/": {  
      "post": {
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["email", "password"],
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "Email must be a valid email."
                },
                "password": {
                  "type": "string",
                  "minLength": 8,
                  "description": "Password must be at least 8 characters long."
                }
              }
            }
          }
        ],
        "tags": ["Sessions"],
        "summary": "Create a new session",
        "description": "Authentication Route",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sessions/reset-password": {
      "put": {
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "validatorCode": {
                  "type": "string",
                  "description": "JWT sended to users mail"
                },
                "password": {
                  "type": "string",
                  "minLength": 8,
                  "description": "Password must be at least 8 characters long."
                }
              }
            }
          }
        ],
        "tags": ["Sessions"],
        "summary": "Reset password",
        "description": "Route used to reset the user's password",
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "Email must be a valid email."
                }
              },
              "required": true
            }
          }
        ],
        "tags": ["Sessions"],
        "summary": "Send email to reset password",
        "description": "Route used to send a email to reset the user's password",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "validatorCode": {
                      "type": "string",
                      "description": "JWT sended to users mail"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },

    "/users/password": {
      "put": {
        "tags": ["Users"],
        "summary": "Change password",
        "description": "Route used by a user to change his password",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/Authorization"
            },
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["password", "newPassword"],
              "type": "object",
              "properties": {
                "password": {
                  "type": "string",
                  "minLength": 8,
                  "description": "Password must be at least 8 characters long."
                },
                "newPassword": {
                  "type": "string",
                  "minLength": 8,
                  "description": "Password must be at least 8 characters long."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/": {
      "post": {
        "tags": ["Users"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["name", "email", "password", "type"],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name must be at least 3 characters long."
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "Email must be a valid email."
                },
                "password": {
                  "type": "string",
                  "minLength": 8,
                  "description": "Password must be at least 8 characters long."
                },
                "type": {
                  "type": "string",
                  "enum": ["PARTICIPANT", "ORGANIZER"],
                  "description": "Type must be PARTICIPANT or ORGANIZER."
                }
              }
            }
          }
        ],
        "description": "Route used to create a new user",
        "summary": "Create a new user",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete a user",
        "description": "Route used by a user to delete his account",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/Authorization"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update a user",
        "description": "Route user by a user to update his account",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/Authorization"
            },
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name must be at least 3 characters long."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get a user",
        "description": "Route used to get a user by id",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },

    "/questions/": {
      "post": {
        "tags": ["Questions"],
        "summary": "Create a new question",
        "description": "Route used by users to create a new question",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/Authorization"
            },
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["title", "content"],
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Title must be at least 3 characters long."
                },
                "content": {
                  "type": "string",
                  "description": "Content must be at least 3 characters long."
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Questions"],
        "summary": "Get all questions",
        "description": "Route used by a user to get all questions",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/Authorization"
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Page must be a number",
              "example": 1
            },
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Limit must be a number, and define a quantity of items per page.",
              "example": 1
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties":{
                    "questions": {
                      "type": "array",
                      "items":{
                        "$ref": "#/components/schemas/Question"
                      }
                    },
                    "questionsCount":{
                      "type": "number",
                      "description": "Number of questions found by slug.",
                      "example": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/questions/slug/{slug}": {
      "get": {
        "tags": ["Questions"],
        "summary": "Get a question by slug",
        "description": "Route used to get a specific question by slug",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/Authorization"
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Page must be a number",
              "example": 1
            },
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Limit must be a number, and define a quantity of items per page.",
              "example": 1
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties":{
                    "questions": {
                      "type": "array",
                      "items":{
                        "$ref": "#/components/schemas/Question"
                      }
                    },
                    "questionsCount":{
                      "type": "number",
                      "description": "Number of questions found by slug.",
                      "example": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/questions/{id}": {
      "get": {
        "tags": ["Questions"],
        "summary": "Get a question",
        "description": "Route used to get a specific question by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id must be a valid uuid.",
              "example": "e30bcc80-5b00-4d0f-922d-e8aad182258c"

            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/Authorization"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Questions"],
        "summary": "Update a question",
        "description": "Route used by a user to update a question",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["title", "content"],
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Title must be at least 3 characters long."
                },
                "content": {
                  "type": "string",
                  "description": "Content must be at least 3 characters long."
                }
              }
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id must be a valid uuid.",
              "example": "e30bcc80-5b00-4d0f-922d-e8aad182258c"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/Authorization"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Questions"],
        "summary": "Delete a question",
        "description": "Route used by a user to delete a question",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id must be a valid uuid.",
              "example": "e30bcc80-5b00-4d0f-922d-e8aad182258c"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/Authorization"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },

    "/answers/": {
      "post": {
        "tags": ["Answers"],
        "summary": "Create a new answer",
        "description": "Route used by a user to create answer to a question",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/Authorization"
            },
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["content", "questionId"],
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "description": "Content must be at least 3 characters long."
                },
                "questionId": {
                  "type": "string",
                  "description": "Question id must be a valid uuid.",
                  "example": "e30bcc80-5b00-4d0f-922d-e8aad182258c"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Answer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/answers/{id}": {
      "patch": {
        "tags": ["Answers"],
        "summary": "Edit a answer",
        "description": "Route used by a user to edit an answer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id must be a valid uuid.",
              "example": "e30bcc80-5b00-4d0f-922d-e8aad182258c"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/Authorization"
            },
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["content"],
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "description": "Content must be at least 3 characters long."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Answer"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Answers"],
        "summary": "Get a answer",
        "description": "Route used to get a answer by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id must be a valid uuid.",
              "example": "e30bcc80-5b00-4d0f-922d-e8aad182258c"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/Authorization"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Answer"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Answers"],
        "summary": "Delete a answer",
        "description": "Route used by a user to delete an answer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id must be a valid uuid.",
              "example": "e30bcc80-5b00-4d0f-922d-e8aad182258c"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/Authorization"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/answers/question/{id}": {
      "get": {
        "tags": ["Answers"],
        "summary": "Get all answers from a question",
        "description": "Route used by a user to get all answers from a question",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id must be a valid uuid.",
              "example": "e30bcc80-5b00-4d0f-922d-e8aad182258c"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/Authorization"
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Page must be a number",
              "example": 1
            },
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Limit must be a number, and define a quantity of items per page.",
              "example": 1
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties":{
                    "answers": {
                      "type": "array",
                      "items":{
                        "$ref": "#/components/schemas/Answer"
                      }
                    },
                    "answersCount":{
                      "type": "number",
                      "description": "Number of answers found by slug.",
                      "example": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/answers/question/{id}/specific":{
      "get": {
        "tags": ["Answers"],
        "summary": "Get a specific answer make by a user from a question",
        "description": "Get a specific answer make by a user from a question",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id must be a valid uuid.",
              "example": "e30bcc80-5b00-4d0f-922d-e8aad182258c"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/Authorization"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Answer"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "securitySchemes": {
    "bearerAuth": {
      "type": "http",
      "scheme": "bearer"
    }
  }
}